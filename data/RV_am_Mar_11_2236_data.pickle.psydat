ccopy_reg
_reconstructor
p1
(cpsychopy.data
TrialHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'origin'
p6
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a"""\u000a\u000aUne expérience simple de recherche visuelle\u000a"""\u000aexperiment = 'RV'\u000a\u000aimport numpy as np\u000a# Import key parts of the PsychoPy library:\u000afrom psychopy import visual, core, event, gui, misc, data\u000a\u000aN_config = 3\u000aN_presence = 2\u000aN_trial_per_condition = 5 \u000aN_trial = N_config * N_presence * N_trial_per_condition * 8\u000a\u000aeccentricity = 6\u000ataille = 2\u000axfac = [1,np.sqrt(2)/2,0,-np.sqrt(2)/2,-1,-np.sqrt(2)/2,0,np.sqrt(2)/2]\u000ayfac = [0,np.sqrt(2)/2,1,np.sqrt(2)/2,0,-np.sqrt(2)/2,-1,-np.sqrt(2)/2]\u000a\u000astopwatch = core.Clock()\u000acore_wait = 0.500\u000acore_wait_stim = 0.500\u000a\u000a#if no file use some defaults\u000ainfo = {}\u000ainfo['observer'] = 'am' # 'anonymous'\u000ainfo['screen_width'] = 30\u000ainfo['screen_distance'] = 40.\u000ainfo['N_trial_per_condition'] = N_trial_per_condition\u000a\u000a\u000atry:\u000a    dlg = gui.DlgFromDict(info)\u000aexcept:\u000a    print('Could not load gui... running with default parameters')\u000a    print(info)\u000a\u000aimport time\u000ainfo['timeStr'] = time.strftime("%b_%d_%H%M", time.localtime())\u000afileName = 'data/' + experiment + '_' + info['observer'] + '_' + info['timeStr'] + '.pickle'\u000a#save to a file for future use (ie storing as defaults)\u000aif dlg.OK:\u000a    misc.toFile(fileName, info)\u000aelse:\u000a    print('Interrupted gui... quitting')\u000a    core.quit() #user cancelled. quit\u000a\u000a# Create a visual window:\u000awin = visual.Window(fullscr=True)\u000a\u000ainstructions = u"""\u000a\u000aLe but de cette expérience est de dire si la lettre E qui est presentée (ou pas)\u000aparmi des distracteurs (des chiffres 3), tout en gardant bien l'oeil fixé sur la croix centrale.\u000a\u000aAprès la présentation des stimuli, répondez le plus rapidement possible avec:\u000a    - la touche ">" (droite) si le caractère "E" est présent \u000a    - la touche "<" (gauche) si le caractère "E" est absent \u000a\u000aATTENTION: certaines fois la tache va etre plus difficile que d'autres.\u000aPressez sur une de ces 2 touches pour continuer...\u000a\u000a"""\u000a\u000a# Objets correspondant à la croix de fixation, à la consigne de réponse et aux instructions:\u000await_for_next = visual.TextStim(win, \u000a                        text = u"+", units='norm', height=0.15, color='white',\u000a                        pos=[0., -0.], alignHoriz='center', alignVert='center' ) \u000await_for_response = visual.TextStim(win, \u000a                        text = u"?", units='norm', height=0.15, color='DarkSlateBlue',\u000a                        pos=[0., -0.], alignHoriz='center', alignVert='center' ) \u000ainstructions_txt = visual.TextStim(win, \u000a                        text = instructions, units='norm', height=0.05, color='BlanchedAlmond',\u000a                        pos=[0., -0.], alignHoriz='center', alignVert='center' ) \u000a\u000adef getResponse():\u000a    event.clearEvents() # clear the event buffer to start with\u000a    resp = None#initially\u000a    while True: # forever until we return a keypress\u000a        for key in event.getKeys():\u000a            #quit\u000a            if key in ['escape', 'q']:\u000a                win.close()\u000a                core.quit()\u000a                return None\u000a            #valid response - check to see if correct\u000a            elif key in ['left', 'right']:\u000a                RT = stopwatch.getTime()   # --> RT in seconds\u000a                if key in ['left'] :return [0,RT]\u000a                else: return [1,RT]\u000a            else:\u000a                visual.TextStim(win, "pressez < ou > (ou Esc pour sortir) (mais pas %s)" %key, height=0.05, color='red').draw()\u000a                win.flip()\u000a\u000a# http://www.psychopy.org/general/units.html\u000adef angle2cm(size_in_deg, screen_distance):\u000a    return 2* screen_distance * np.tan(size_in_deg * np.pi / 180. / 2.)\u000a\u000adef angle2norm(size_in_deg, screen_distance, screen_width):\u000a    return angle2cm(size_in_deg, screen_distance) / screen_width * 2\u000a\u000adef presentStimulus(consigne, pos_indx, config):\u000a    """Present stimulus and distractors\u000a    """\u000a    stim_xpos = angle2norm(eccentricity * xfac[pos_indx], info['screen_distance'], info['screen_width'])\u000a    stim_ypos = angle2norm(eccentricity * yfac[pos_indx], info['screen_distance'], info['screen_width'])\u000a    stim = visual.TextStim(win, text=u"E", units='norm', height=angle2norm(taille, info['screen_distance'], info['screen_width']), color='black',\u000a                        pos=[stim_xpos, stim_ypos], \u000a                        alignHoriz='center', alignVert='center', flipHoriz=not(consigne))\u000a    stim.draw()\u000a    for i in np.arange(config-1):\u000a       pos_shift = np.remainder(pos_indx + (i+1)*(8/config),8)\u000a       distr_xpos = angle2norm(eccentricity * xfac[pos_shift], info['screen_distance'], info['screen_width'])\u000a       distr_ypos = angle2norm(eccentricity * yfac[pos_shift], info['screen_distance'], info['screen_width'])\u000a       distr = visual.TextStim(win, text=u"E", units='norm', height=angle2norm(taille, info['screen_distance'], info['screen_width']), color='black',\u000a                    pos=[distr_xpos, distr_ypos], \u000a                    alignHoriz='center', alignVert='center', flipHoriz=1)\u000a       distr.draw()\u000a    \u000a# initialisation: on montre les instructions\u000ainstructions_txt.draw()\u000awin.flip()\u000agetResponse()\u000a\u000a\u000a#create your list of stimuli\u000astimList = []\u000afor pos_indx in [0,1,2,3,4,5,6,7]:\u000a    for config in [2,4,8]: # en degrés d'angle visuel\u000a        for consigne in [0, 1]:\u000a            stimList.append( \u000a                {'pos_indx':pos_indx, 'config':config, 'consigne':consigne} #this is a python 'dictionary'\u000a                )\u000a\u000a#organise them with the trial handler\u000atrials = data.TrialHandler(stimList, info['N_trial_per_condition'])\u000atrials.data.addDataType('result')#this will help store things with the stimuli\u000a\u000a# on commence l'expérience\u000afor trial in trials:\u000a    # fixation\u000a    wait_for_next.draw()\u000a    win.flip()\u000a    core.wait(core_wait)\u000a    # stimulus\u000a    wait_for_next.draw()\u000a    presentStimulus(trial['consigne'], trial['pos_indx'], trial['config'])\u000a    win.flip()\u000a    stopwatch.reset()\u000a    # réponse\u000a#    core.wait(core_wait_stim)\u000a#    wait_for_response.draw()\u000a #   win.flip()\u000a    #result = getResponse()\u000a    [response, respRT] = getResponse()\u000a#   if response == consigne: result=1\u000a #   else: result = 0\u000a    if response == consigne: result=1\u000a    else: result = 0\u000a    trials.data.add('result', result) \u000a    trials.data.add('RT', respRT) \u000a\u000awin.update()\u000acore.wait(0.5)\u000awin.close()\u000a\u000a#save data\u000atrials.printAsText(stimOut=['pos_indx', 'config', 'consigne'], #write summary data to screen \u000a                  dataOut=['result_raw','RT_raw'])\u000atrials.saveAsExcel(fileName=fileName.replace('.pickle', ''), # ...or an xlsx file (which supports sheets)\u000a                  sheetName = 'rawData',\u000a                  stimOut=['pos_indx', 'config', 'consigne'], \u000a                  dataOut=['result_raw','RT_raw'])\u000atrials.saveAsPickle(fileName=fileName.replace('.pickle', '_data.pickle'))#this saves a copy of the whole object  
p7
sS'thisTrial'
p8
(lp9
sS'_exp'
p10
NsS'name'
p11
S''
sS'originPath'
p12
S'/Users/montagnini.a/WORK/PROJECTS/ECOLE/SVT_projet_vision.py/SVT_projet_vision_exp3_RV.py'
p13
sS'thisRepN'
p14
I1
sS'autoLog'
p15
I01
sS'extraInfo'
p16
NsS'data'
p17
g1
(cpsychopy.data
DataHandler
p18
c__builtin__
dict
p19
(dp20
S'ran'
p21
cnumpy.ma.core
_mareconstruct
p22
(cnumpy.ma.core
MaskedArray
p23
cnumpy
ndarray
p24
(I0
tp25
S'b'
tRp26
(I1
(I48
I1
tcnumpy
dtype
p27
(S'f4'
I0
I1
tRp28
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'RT'
p29
g22
(g23
g24
g25
S'b'
tRp30
(I1
(I48
I1
tg28
I00
S"$\xfdB?\x88\x9a0?du\x13?`\xbc\xe7>\x10\xa2\xed>(\xb6.?\xdc\x85&?@8'?\xbc\xc1\x00?T\xf0/?X\xec7?8/F?41)?@\xf2\x1e?\xc0\x82\x1f?\x10\xb0\x02?\xc8\xda\x1e?\x88\xec#?\xd0\xae\x1e?\xe8\xfa&?\xc8\xfe\xf1>\x10\xb3W?\x9c\xfcR?$\x10O?\x0ca\t?\\\x18\x19?\x80]\xf5>\xec/S?\x00.\x1c?<\xa9\x13?\xe8\xce\xed>\x10\x004?\xecX\t?@\xce#?\xec\x97\x03?\x885T?\x00m\x13?\x98\xe1O?tS\x1f?\xd0kg?8L@?\xc8\xecP?\x00\x9e\xfc>l#\x12?\xa0\x95\x04?D\x8fX?\xe8\x0fu?H\x96$?"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p31
g22
(g23
g24
g25
S'b'
tRp32
(I1
(I48
I1
tg28
I00
S'\x00\x00\xe8A\x00\x000A\x00\x00\xd8A\x00\x00\x80@\x00\x00\x10B\x00\x00\xa0A\x00\x00\x08B\x00\x00\xe0@\x00\x00(B\x00\x00\xa0@\x00\x00<B\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xa8A\x00\x00PA\x00\x008B\x00\x00\x0cB\x00\x00\xf0A\x00\x00`A\x00\x00@A\x00\x000B\x00\x00\xc0A\x00\x00 B\x00\x00\x80?\x00\x00\x90A\x00\x00\xb8A\x00\x00,B\x00\x00\xb0A\x00\x004B\x00\x00\x14B\x00\x00pA\x00\x00\x10A\x00\x00\x88A\x00\x00\x98A\x00\x00\x04B\x00\x00\x1cB\x00\x00\x18B\x00\x00\x00\x00\x00\x00\x00B\x00\x00 A\x00\x00\x00A\x00\x00\xc0@\x00\x00$B\x00\x00\x80A\x00\x00\x00@\x00\x00\xe0A\x00\x00@@\x00\x00\xf8A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'result'
p33
g22
(g23
g24
g25
S'b'
tRp34
(I1
(I48
I1
tg28
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp35
(dp36
S'isNumeric'
p37
(dp38
g21
I01
sg29
I01
sg31
I01
sg33
I01
ssS'trials'
p39
g4
sS'dataTypes'
p40
(lp41
g21
ag31
ag33
ag29
asS'dataShape'
p42
(lp43
I48
aI1
asbsS'method'
p44
S'random'
p45
sS'sequenceIndices'
p46
cnumpy.core.multiarray
_reconstruct
p47
(g24
(I0
tS'b'
tRp48
(I1
(I48
I1
tg27
(S'i4'
I0
I1
tRp49
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'%\x00\x00\x00\x17\x00\x00\x00,\x00\x00\x00.\x00\x00\x00\x03\x00\x00\x00\t\x00\x00\x00)\x00\x00\x00\x07\x00\x00\x00(\x00\x00\x00\x1f\x00\x00\x00\'\x00\x00\x00\x01\x00\x00\x00\x13\x00\x00\x00\x0e\x00\x00\x00\x12\x00\x00\x00\x1e\x00\x00\x00+\x00\x00\x00 \x00\x00\x00\x18\x00\x00\x00!\x00\x00\x00\x05\x00\x00\x00\r\x00\x00\x00\x1b\x00\x00\x00\x19\x00\x00\x00\x15\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00-\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00/\x00\x00\x00&\x00\x00\x00"\x00\x00\x00\x06\x00\x00\x00\x10\x00\x00\x00\x04\x00\x00\x00\x1d\x00\x00\x00$\x00\x00\x00#\x00\x00\x00\x16\x00\x00\x00*\x00\x00\x00\x08\x00\x00\x00\x1a\x00\x00\x00\x14\x00\x00\x00\x1c\x00\x00\x00\x0f\x00\x00\x00\n\x00\x00\x00'
tbsS'finished'
p50
I01
sS'nReps'
p51
I1
sS'nRemaining'
p52
I-1
sS'trialList'
p53
(lp54
g1
(cpsychopy.data
TrialType
p55
g19
(dp56
S'pos_indx'
p57
I0
sS'consigne'
p58
I0
sS'config'
p59
I2
stRp60
ag1
(g55
g19
(dp61
g57
I0
sg58
I1
sg59
I2
stRp62
ag1
(g55
g19
(dp63
g57
I0
sg58
I0
sg59
I4
stRp64
ag1
(g55
g19
(dp65
g57
I0
sg58
I1
sg59
I4
stRp66
ag1
(g55
g19
(dp67
g57
I0
sg58
I0
sg59
I8
stRp68
ag1
(g55
g19
(dp69
g57
I0
sg58
I1
sg59
I8
stRp70
ag1
(g55
g19
(dp71
g57
I1
sg58
I0
sg59
I2
stRp72
ag1
(g55
g19
(dp73
g57
I1
sg58
I1
sg59
I2
stRp74
ag1
(g55
g19
(dp75
g57
I1
sg58
I0
sg59
I4
stRp76
ag1
(g55
g19
(dp77
g57
I1
sg58
I1
sg59
I4
stRp78
ag1
(g55
g19
(dp79
g57
I1
sg58
I0
sg59
I8
stRp80
ag1
(g55
g19
(dp81
g57
I1
sg58
I1
sg59
I8
stRp82
ag1
(g55
g19
(dp83
g57
I2
sg58
I0
sg59
I2
stRp84
ag1
(g55
g19
(dp85
g57
I2
sg58
I1
sg59
I2
stRp86
ag1
(g55
g19
(dp87
g57
I2
sg58
I0
sg59
I4
stRp88
ag1
(g55
g19
(dp89
g57
I2
sg58
I1
sg59
I4
stRp90
ag1
(g55
g19
(dp91
g57
I2
sg58
I0
sg59
I8
stRp92
ag1
(g55
g19
(dp93
g57
I2
sg58
I1
sg59
I8
stRp94
ag1
(g55
g19
(dp95
g57
I3
sg58
I0
sg59
I2
stRp96
ag1
(g55
g19
(dp97
g57
I3
sg58
I1
sg59
I2
stRp98
ag1
(g55
g19
(dp99
g57
I3
sg58
I0
sg59
I4
stRp100
ag1
(g55
g19
(dp101
g57
I3
sg58
I1
sg59
I4
stRp102
ag1
(g55
g19
(dp103
g57
I3
sg58
I0
sg59
I8
stRp104
ag1
(g55
g19
(dp105
g57
I3
sg58
I1
sg59
I8
stRp106
ag1
(g55
g19
(dp107
g57
I4
sg58
I0
sg59
I2
stRp108
ag1
(g55
g19
(dp109
g57
I4
sg58
I1
sg59
I2
stRp110
ag1
(g55
g19
(dp111
g57
I4
sg58
I0
sg59
I4
stRp112
ag1
(g55
g19
(dp113
g57
I4
sg58
I1
sg59
I4
stRp114
ag1
(g55
g19
(dp115
g57
I4
sg58
I0
sg59
I8
stRp116
ag1
(g55
g19
(dp117
g57
I4
sg58
I1
sg59
I8
stRp118
ag1
(g55
g19
(dp119
g57
I5
sg58
I0
sg59
I2
stRp120
ag1
(g55
g19
(dp121
g57
I5
sg58
I1
sg59
I2
stRp122
ag1
(g55
g19
(dp123
g57
I5
sg58
I0
sg59
I4
stRp124
ag1
(g55
g19
(dp125
g57
I5
sg58
I1
sg59
I4
stRp126
ag1
(g55
g19
(dp127
g57
I5
sg58
I0
sg59
I8
stRp128
ag1
(g55
g19
(dp129
g57
I5
sg58
I1
sg59
I8
stRp130
ag1
(g55
g19
(dp131
g57
I6
sg58
I0
sg59
I2
stRp132
ag1
(g55
g19
(dp133
g57
I6
sg58
I1
sg59
I2
stRp134
ag1
(g55
g19
(dp135
g57
I6
sg58
I0
sg59
I4
stRp136
ag1
(g55
g19
(dp137
g57
I6
sg58
I1
sg59
I4
stRp138
ag1
(g55
g19
(dp139
g57
I6
sg58
I0
sg59
I8
stRp140
ag1
(g55
g19
(dp141
g57
I6
sg58
I1
sg59
I8
stRp142
ag1
(g55
g19
(dp143
g57
I7
sg58
I0
sg59
I2
stRp144
ag1
(g55
g19
(dp145
g57
I7
sg58
I1
sg59
I2
stRp146
ag1
(g55
g19
(dp147
g57
I7
sg58
I0
sg59
I4
stRp148
ag1
(g55
g19
(dp149
g57
I7
sg58
I1
sg59
I4
stRp150
ag1
(g55
g19
(dp151
g57
I7
sg58
I0
sg59
I8
stRp152
ag1
(g55
g19
(dp153
g57
I7
sg58
I1
sg59
I8
stRp154
asS'seed'
p155
NsS'thisIndex'
p156
cnumpy.core.multiarray
scalar
p157
(g49
S'\n\x00\x00\x00'
tRp158
sS'thisN'
p159
I48
sS'thisTrialN'
p160
I0
sS'nTotal'
p161
I48
sS'_warnUseOfNext'
p162
I01
sb.